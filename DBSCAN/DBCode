import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.cluster import DBSCAN

# Load the dataset
df = pd.read_csv('Customers.csv')

# Encode 'Gender' as 0 and 1 (Male = 0, Female = 1)
le = LabelEncoder()
df['Gender'] = le.fit_transform(df['Gender'])

# One-Hot encode 'Profession'
df = pd.get_dummies(df, columns=['Profession'], drop_first=True)

# Select numeric features for scaling
numeric_features = ['Annual Income ($)', 'Spending Score (1-100)']

# Initialize and fit the StandardScaler on numeric features
scaler = StandardScaler()
scaled_data = scaler.fit_transform(df[numeric_features])

# Apply DBSCAN for clustering
dbscan = DBSCAN(eps=0.09, min_samples=4)  # eps is the maximum distance between two points to be considered neighbors
df['Cluster'] = dbscan.fit_predict(scaled_data)

# Check the resulting clusters
# print(df['Cluster'].value_counts())  # This shows how many points are assigned to each cluster (-1 means noise)

# Group by clusters and get the mean of each feature
cluster_summary = df.groupby('Cluster').mean()

# Show the cluster summary with original values
# print(cluster_summary)

# Plot the clusters on a 2D plot (Annual Income vs Spending Score)
sns.scatterplot(x='Annual Income ($)', y='Spending Score (1-100)', hue='Cluster', palette='Set2', data=df)
plt.title('Customer Segments (DBSCAN Clustering)')
plt.xlabel('Annual Income ($)')
plt.ylabel('Spending Score (1-100)')
plt.legend(title='Profession', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.xticks(rotation=0)
plt.show()

# Select only the profession-related columns (those starting with 'Profession_')
profession_columns = [col for col in cluster_summary.columns if col.startswith('Profession_')]

# Extract the relevant data for the stacked bar chart
profession_summary = cluster_summary[profession_columns]

# Plot a stacked bar chart for each cluster with profession proportions
profession_summary.plot(kind='bar', stacked=True, figsize=(10, 6), colormap='Set2')
plt.title('Profession Distribution in Each Cluster')
plt.xlabel('Cluster')
plt.ylabel('Percentage of Profession')
plt.legend(title='Profession', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.xticks(rotation=0)
plt.show()

# Plot a bar chart for income by cluster
income_by_cluster = cluster_summary['Annual Income ($)']
income_by_cluster.plot(kind='bar', figsize=(10, 6), color='skyblue')
plt.title('Average Income by Cluster')
plt.xlabel('Cluster')
plt.ylabel('Average Annual Income ($)')
plt.xticks(rotation=0)
plt.tight_layout()  # Adjust layout to avoid overlap
plt.show()

# Plot the average Spending Score by Cluster
spending_score_by_cluster = cluster_summary['Spending Score (1-100)']
spending_score_by_cluster.plot(kind='bar', figsize=(10, 6), color='lightgreen')
plt.title('Average Spending Score by Cluster')
plt.xlabel('Cluster')
plt.ylabel('Average Spending Score (1-100)')
plt.xticks(rotation=0)
plt.tight_layout()  # Adjust layout to avoid overlap
plt.show()

# Count the number of people in each cluster (including noise, which is labeled as -1)
cluster_counts = df['Cluster'].value_counts()

# Plot the count of people in each cluster as a bar chart
plt.figure(figsize=(8, 6))
cluster_counts.plot(kind='bar', color='skyblue', edgecolor='black')

# Adding title and labels
plt.title('Number of People in Each Cluster', fontsize=14)
plt.xlabel('Cluster', fontsize=12)
plt.ylabel('Count of People', fontsize=12)
plt.xticks(rotation=0)  # Keep x labels horizontal
plt.tight_layout()  # Adjust layout to avoid overlap
plt.show()
